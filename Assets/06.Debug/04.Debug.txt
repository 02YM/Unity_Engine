# Debug
- 디보깅 영도로 자주 사용되며, 콘솔 출력, 조건 검증, 에디터 중지 등 다양한 기능을 제공합니다.

# Static Properties
	프로퍼티						설명
- isDebugBuild					현재 빌드가 개발용 빌드 인지 여부 확인
- developerConsoleEnabled		디버그 콘솔 사용 여부 제어(true/false)

## 개발자용 콘솔
- 게임이 빌드가 된 상태이고, 빌드된 게임에서만 사용할 수 있습니다. 기본키(F1)

## isDebugBuild
- 릴리지 빌드 vs 개발 딜드 구반할 때 자주 사용합니다.

## 개발 빌드		VS									릴리즈 빌드
-	특징	
	Debug.isDebugBuild == true						Debug.isDebugBuild	== false
	콘솔 로그 출력 가능								Debug.Log() 호출은 무시되거나 제거될 수 있음
 	프로퍼일러 연결 허용								프로퍼일러/ 디버거 연결 불가
	Script Debugging 가능							코드 최적화 및 압축 적용
	성능 최적화가 덜 되어 있음						성능과 용량이 최적화 됨
	빌드 크기가 조금 더 큼							Development Build 마크 없음
	실행 시 화면 좌측 상단에 Development Build 표시
-	언제 사용?
	내부 테스트										앱스토어 제출
	성능(Profiler) 분석								사용자 대상 배포
	디버깅 시										실제 서비스 환경에서 실행할 때
-	어떻게 설정하는지?
	File -> Build Settings -> 하단의 "Development Build" 체크박스

# Static Methods
	메서드						설명
- Log()							일반 메시지 출력
- LogWarning()					경고 메시지 출력(노란색)
- LogError()					에러 메시지 출력(빨간색)
- Assert()						조건 실패 시 여러 메시지 출력
- Break()						에디터 정지(디버깅용)
- DrawLine()					Scene 뷰에 선을 그려 시각화
- ClearDeveloperConsole()		디버그 콘솔 클리어